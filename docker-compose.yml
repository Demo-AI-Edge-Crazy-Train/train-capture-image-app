version: '3.3'
services:
  mosquitto:
      user: "1883:1883"
      image: eclipse-mosquitto
      hostname: mosquitto
      container_name: mosquitto
      restart: unless-stopped
      ports:
        - "1883:1883"
        - "9001:9001"
      volumes:
        - ./podman-compose/broker/mosquitto/log:/mosquitto/log
        - ./podman-compose/broker/mosquitto/config:/mosquitto/config
        - ./podman-compose/broker/mosquitto/data:/mosquitto/data
  zookeeper:
    container_name: zookeeper
    image: quay.io/strimzi/kafka:latest-kafka-3.4.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
  kafka:
    container_name: kafka
    image: quay.io/strimzi/kafka:latest-kafka-3.4.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override replica.fetch.max.bytes=3000000 --override message.max.bytes=3000000 --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 600000
    depends_on:
      - zookeeper
  registry:
    container_name: registry
    image: quay.io/apicurio/apicurio-registry-mem:2.4.2.Final
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8080"
    environment:
      QUARKUS_PROFILE: prod
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      APPLICATION_ID: registry_id
      APPLICATION_SERVER: localhost:9000
  
  bridge:
    container_name: bridge
    image: quay.io/strimzi/kafka-bridge:latest
    command: [
      "sh", "-c",
      "/opt/strimzi/bin/docker/kafka_bridge_run.sh"
    ]
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_BRIDGE_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_BRIDGE_ID: bridge1
      KAFKA_BRIDGE_HTTP_ENABLED: "true"
      KAFKA_BRIDGE_HTTP_HOST: "0.0.0.0"
      KAFKA_BRIDGE_HTTP_PORT: "8080"
    volumes:
      - ./log4j.properties:/opt/strimzi/custom-config/log4j.properties
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      kafka:
        condition: service_started  
  # intelligent-train-app:
  #   platform: linux/arm64/v8
  #   image: https://quay.io/repository/demo-ai-edge-crazy-train/intelligent-train:latest
  #   volumes:
  #     - /tmp:/tmp
  #   environment:
  #     - MQTT_BROKER=localhost
  #     - MQTT_PORT=1883
  #     - MQTT_TOPIC=train-image
  #     - MQTT_PUB_TOPIC=results
  #   depends_on:
  #     - mosquitto
 
  # train-capture-image-app:
  #   platform: linux/arm64/v8
  #   image: quay.io/nmasse_itix/capture-image-arm64:latest
  #   ports:
  #     - 8080:8080
  #   environment: 
  #     - VIDEO_DEVICE_INDEX=0
  #     - TMP_FOLDER=/tmp
  #     - INTERVAL=100
  #     - NB_IMAGE_SEC=10
  #     - BROKER_MQTT=tcp://localhost:1883
  #     - TOPIC=train-image
  #   volumes:
  #     - /dev:/dev
  #     - /tmp/crazy-images:/tmp/crazy-images
  #   depends_on:
  #     - mosquitto
  #     - intelligent-train-app
